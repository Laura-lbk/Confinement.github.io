{"version":3,"sources":["functions/background.js","functions/name.js","functions/compteur.js","serviceWorker.js","index.js"],"names":["Background","className","params","React","Component","Name","this","props","name","Compteur","datemtn","today","Date","date","getMonth","getDate","getFullYear","toString","currentdate","console","log","nbjours","date1","date2","dt1","dt2","Math","floor","UTC","nbJours","Boolean","window","location","hostname","match","html","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAkCeA,E,uKAvBX,OAAO,yBAAKC,UAAU,uBAClB,kBAAC,IAAD,CAAWC,OAAQ,CACjB,UAAY,CACV,OAAS,CACT,MAAQ,IAEV,KAAO,CACL,MAAQ,IAGZ,cAAgB,CACd,OAAS,CACP,QAAU,CACR,QAAS,EACT,KAAQ,qB,GAnBGC,IAAMC,WCEhBC,E,uKAJT,OAAO,uCAAaC,KAAKC,MAAMC,KAAxB,uB,GAFML,IAAMC,W,IC2BVK,E,uKATX,IAAIC,EAVR,WACI,IAAIC,EAAQ,IAAIC,KACZC,EAAO,KAAKF,EAAMG,WAAW,GAAG,IAAIH,EAAMI,UAAU,IAAIJ,EAAMK,cAElE,OADAH,EAAKI,WACEJ,EAMKK,GACZC,QAAQC,IAAIV,GAEZ,IAAIW,EArBR,SAAiBC,EAAOC,GACpB,IAAIC,EAAM,IAAIZ,KAAKU,GACnBH,QAAQC,IAAII,GACZ,IAAIC,EAAM,IAAIb,KAAKW,GAEnB,OADAJ,QAAQC,IAAIK,GACLC,KAAKC,OAAOf,KAAKgB,IAAIH,EAAIT,cAAeS,EAAIX,WAAYW,EAAIV,WAAaH,KAAKgB,IAAIJ,EAAIR,cAAeQ,EAAIV,WAAYU,EAAIT,YAA9G,OAgBNc,CAAQ,aAAcnB,GAElC,OAAO,2DAA8BW,EAA9B,2B,GARYlB,IAAMC,WCLT0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPN,IAAMC,EACJ,yBAAKlC,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMO,KAAK,UACX,yBAAKP,UAAU,YACf,kBAAC,EAAD,QAKJmC,IAASC,OACPF,EACAG,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,a","file":"static/js/main.c44c2282.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../CSS/background.css';\r\nimport Particles from 'react-particles-js';\r\n\r\n\r\n\r\nclass Background extends React.Component {\r\n    \r\n\r\n\r\n    render() {\r\n    return <div className=\"particles-container\">\r\n        <Particles params={{\r\n          \"particles\":{\r\n            \"number\":{\r\n            \"value\":80\r\n          },\r\n          \"size\":{\r\n            \"value\":3\r\n          }\r\n        },\r\n        \"interactivity\":{\r\n          \"events\":{\r\n            \"onhover\":{\r\n              \"enable\":true,\r\n              \"mode\": \"repulse\"\r\n            }\r\n          }\r\n        }\r\n        }}/>\r\n        </div>;\r\n    }\r\n  }\r\n\r\nexport default Background;","import React from 'react'\r\n\r\nclass Name extends React.Component {\r\n    render() {\r\n      return <h1>Bonjour {this.props.name} ! ðŸ˜Š</h1>;\r\n    }\r\n  }\r\n\r\nexport default Name;","import React from 'react'\r\n\r\nfunction nbJours(date1, date2){\r\n    var dt1 = new Date(date1);\r\n    console.log(dt1);\r\n    var dt2 = new Date(date2);\r\n    console.log(dt2);\r\n    return Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) - Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()) ) /(1000 * 60 * 60 * 24));\r\n};\r\n\r\nfunction currentdate(){\r\n    var today = new Date();\r\n    var date = '0'+(today.getMonth()+1)+'/'+today.getDate()+'/'+today.getFullYear();\r\n    date.toString();\r\n    return date;\r\n}\r\n\r\nclass Compteur extends React.Component {\r\n    render() {\r\n    \r\n    var datemtn=currentdate();\r\n    console.log(datemtn);\r\n\r\n    var nbjours=nbJours('03/17/2020', datemtn);\r\n\r\n    return <p>Tu es confinÃ©(e) depuis : {nbjours} jours ðŸ”¥</p>;\r\n    }\r\n  }\r\n\r\nexport default Compteur;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './CSS/homepage.css';\nimport Background from './functions/background';\nimport Name from './functions/name';\nimport Compteur from './functions/compteur';\n\nimport * as serviceWorker from './serviceWorker';\n\n\nconst html=(\n  <div className=\"contenu\">\n    <Background/>\n    <Name name=\"Laura\"/>\n    <div className=\"compteur\">\n    <Compteur/>\n    </div>\n  </div>\n)\n\nReactDOM.render(\n  html,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}